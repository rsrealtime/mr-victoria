//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HoloToolkit.Sharing {

public class NetworkConnectionListener : Listener {
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  internal NetworkConnectionListener(System.IntPtr cPtr, bool cMemoryOwn) : base(SharingClientPINVOKE.NetworkConnectionListener_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static System.Runtime.InteropServices.HandleRef getCPtr(NetworkConnectionListener obj) {
    return (obj == null) ? new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetworkConnectionListener() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharingClientPINVOKE.delete_NetworkConnectionListener(swigCPtr);
        }
        swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void OnConnected(NetworkConnection connection) {
    if (SwigDerivedClassHasMethod("OnConnected", swigMethodTypes0)) SharingClientPINVOKE.NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(swigCPtr, NetworkConnection.getCPtr(connection)); else SharingClientPINVOKE.NetworkConnectionListener_OnConnected(swigCPtr, NetworkConnection.getCPtr(connection));
  }

  public virtual void OnConnectFailed(NetworkConnection connection) {
    if (SwigDerivedClassHasMethod("OnConnectFailed", swigMethodTypes1)) SharingClientPINVOKE.NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(swigCPtr, NetworkConnection.getCPtr(connection)); else SharingClientPINVOKE.NetworkConnectionListener_OnConnectFailed(swigCPtr, NetworkConnection.getCPtr(connection));
  }

  public virtual void OnDisconnected(NetworkConnection connection) {
    if (SwigDerivedClassHasMethod("OnDisconnected", swigMethodTypes2)) SharingClientPINVOKE.NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(swigCPtr, NetworkConnection.getCPtr(connection)); else SharingClientPINVOKE.NetworkConnectionListener_OnDisconnected(swigCPtr, NetworkConnection.getCPtr(connection));
  }

  public virtual void OnMessageReceived(NetworkConnection connection, NetworkInMessage message) {
    if (SwigDerivedClassHasMethod("OnMessageReceived", swigMethodTypes3)) SharingClientPINVOKE.NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(swigCPtr, NetworkConnection.getCPtr(connection), NetworkInMessage.getCPtr(message)); else SharingClientPINVOKE.NetworkConnectionListener_OnMessageReceived(swigCPtr, NetworkConnection.getCPtr(connection), NetworkInMessage.getCPtr(message));
    if (SharingClientPINVOKE.SWIGPendingException.Pending) throw SharingClientPINVOKE.SWIGPendingException.Retrieve();
  }

  public NetworkConnectionListener() : this(SharingClientPINVOKE.new_NetworkConnectionListener(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnConnected", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNetworkConnectionListener_0(SwigDirectorOnConnected);
    if (SwigDerivedClassHasMethod("OnConnectFailed", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateNetworkConnectionListener_1(SwigDirectorOnConnectFailed);
    if (SwigDerivedClassHasMethod("OnDisconnected", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateNetworkConnectionListener_2(SwigDirectorOnDisconnected);
    if (SwigDerivedClassHasMethod("OnMessageReceived", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateNetworkConnectionListener_3(SwigDirectorOnMessageReceived);
    SharingClientPINVOKE.NetworkConnectionListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, System.Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NetworkConnectionListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnConnected(System.IntPtr connection) {
    OnConnected((connection == System.IntPtr.Zero) ? null : new NetworkConnection(connection, true));
  }

  private void SwigDirectorOnConnectFailed(System.IntPtr connection) {
    OnConnectFailed((connection == System.IntPtr.Zero) ? null : new NetworkConnection(connection, true));
  }

  private void SwigDirectorOnDisconnected(System.IntPtr connection) {
    OnDisconnected((connection == System.IntPtr.Zero) ? null : new NetworkConnection(connection, true));
  }

  private void SwigDirectorOnMessageReceived(System.IntPtr connection, System.IntPtr message) {
    OnMessageReceived((connection == System.IntPtr.Zero) ? null : new NetworkConnection(connection, true), new NetworkInMessage(message, false));
  }

  public delegate void SwigDelegateNetworkConnectionListener_0(System.IntPtr connection);
  public delegate void SwigDelegateNetworkConnectionListener_1(System.IntPtr connection);
  public delegate void SwigDelegateNetworkConnectionListener_2(System.IntPtr connection);
  public delegate void SwigDelegateNetworkConnectionListener_3(System.IntPtr connection, System.IntPtr message);

  private SwigDelegateNetworkConnectionListener_0 swigDelegate0;
  private SwigDelegateNetworkConnectionListener_1 swigDelegate1;
  private SwigDelegateNetworkConnectionListener_2 swigDelegate2;
  private SwigDelegateNetworkConnectionListener_3 swigDelegate3;

  private static System.Type[] swigMethodTypes0 = new System.Type[] { typeof(NetworkConnection) };
  private static System.Type[] swigMethodTypes1 = new System.Type[] { typeof(NetworkConnection) };
  private static System.Type[] swigMethodTypes2 = new System.Type[] { typeof(NetworkConnection) };
  private static System.Type[] swigMethodTypes3 = new System.Type[] { typeof(NetworkConnection), typeof(NetworkInMessage) };
}

}
