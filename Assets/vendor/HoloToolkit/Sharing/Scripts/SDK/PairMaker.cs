//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HoloToolkit.Sharing {

public class PairMaker : System.IDisposable {
  private System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PairMaker(System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static System.Runtime.InteropServices.HandleRef getCPtr(PairMaker obj) {
    return (obj == null) ? new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PairMaker() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharingClientPINVOKE.delete_PairMaker(swigCPtr);
        }
        swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool IsReceiver() {
    bool ret = (SwigDerivedClassHasMethod("IsReceiver", swigMethodTypes0) ? SharingClientPINVOKE.PairMaker_IsReceiverSwigExplicitPairMaker(swigCPtr) : SharingClientPINVOKE.PairMaker_IsReceiver(swigCPtr));
    return ret;
  }

  public virtual int GetAddressCount() {
    int ret = SharingClientPINVOKE.PairMaker_GetAddressCount(swigCPtr);
    return ret;
  }

  public virtual XString GetAddress(int index) {
    System.IntPtr cPtr = (SwigDerivedClassHasMethod("GetAddress", swigMethodTypes2) ? SharingClientPINVOKE.PairMaker_GetAddressSwigExplicitPairMaker(swigCPtr, index) : SharingClientPINVOKE.PairMaker_GetAddress(swigCPtr, index));
    XString ret = (cPtr == System.IntPtr.Zero) ? null : new XString(cPtr, true);
    return ret; 
  }

  public virtual ushort GetPort() {
    ushort ret = (SwigDerivedClassHasMethod("GetPort", swigMethodTypes3) ? SharingClientPINVOKE.PairMaker_GetPortSwigExplicitPairMaker(swigCPtr) : SharingClientPINVOKE.PairMaker_GetPort(swigCPtr));
    return ret;
  }

  public virtual void Update() {
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes4)) SharingClientPINVOKE.PairMaker_UpdateSwigExplicitPairMaker(swigCPtr); else SharingClientPINVOKE.PairMaker_Update(swigCPtr);
  }

  public virtual bool IsReadyToConnect() {
    bool ret = (SwigDerivedClassHasMethod("IsReadyToConnect", swigMethodTypes5) ? SharingClientPINVOKE.PairMaker_IsReadyToConnectSwigExplicitPairMaker(swigCPtr) : SharingClientPINVOKE.PairMaker_IsReadyToConnect(swigCPtr));
    return ret;
  }

  public virtual int GetLocalKey() {
    int ret = (SwigDerivedClassHasMethod("GetLocalKey", swigMethodTypes6) ? SharingClientPINVOKE.PairMaker_GetLocalKeySwigExplicitPairMaker(swigCPtr) : SharingClientPINVOKE.PairMaker_GetLocalKey(swigCPtr));
    return ret;
  }

  public virtual int GetRemoteKey() {
    int ret = (SwigDerivedClassHasMethod("GetRemoteKey", swigMethodTypes7) ? SharingClientPINVOKE.PairMaker_GetRemoteKeySwigExplicitPairMaker(swigCPtr) : SharingClientPINVOKE.PairMaker_GetRemoteKey(swigCPtr));
    return ret;
  }

  public PairMaker() : this(SharingClientPINVOKE.new_PairMaker(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("IsReceiver", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePairMaker_0(SwigDirectorIsReceiver);
    if (SwigDerivedClassHasMethod("GetAddressCount", swigMethodTypes1))
      swigDelegate1 = new SwigDelegatePairMaker_1(SwigDirectorGetAddressCount);
    if (SwigDerivedClassHasMethod("GetAddress", swigMethodTypes2))
      swigDelegate2 = new SwigDelegatePairMaker_2(SwigDirectorGetAddress);
    if (SwigDerivedClassHasMethod("GetPort", swigMethodTypes3))
      swigDelegate3 = new SwigDelegatePairMaker_3(SwigDirectorGetPort);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes4))
      swigDelegate4 = new SwigDelegatePairMaker_4(SwigDirectorUpdate);
    if (SwigDerivedClassHasMethod("IsReadyToConnect", swigMethodTypes5))
      swigDelegate5 = new SwigDelegatePairMaker_5(SwigDirectorIsReadyToConnect);
    if (SwigDerivedClassHasMethod("GetLocalKey", swigMethodTypes6))
      swigDelegate6 = new SwigDelegatePairMaker_6(SwigDirectorGetLocalKey);
    if (SwigDerivedClassHasMethod("GetRemoteKey", swigMethodTypes7))
      swigDelegate7 = new SwigDelegatePairMaker_7(SwigDirectorGetRemoteKey);
    SharingClientPINVOKE.PairMaker_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, System.Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PairMaker));
    return hasDerivedMethod;
  }

  private bool SwigDirectorIsReceiver() {
    return IsReceiver();
  }

  private int SwigDirectorGetAddressCount() {
    return GetAddressCount();
  }

  private System.IntPtr SwigDirectorGetAddress(int index) {
    return  XString.getCPtr(GetAddress(index)).Handle ;
  }

  private ushort SwigDirectorGetPort() {
    return GetPort();
  }

  private void SwigDirectorUpdate() {
    Update();
  }

  private bool SwigDirectorIsReadyToConnect() {
    return IsReadyToConnect();
  }

  private int SwigDirectorGetLocalKey() {
    return GetLocalKey();
  }

  private int SwigDirectorGetRemoteKey() {
    return GetRemoteKey();
  }

  public delegate bool SwigDelegatePairMaker_0();
  public delegate int SwigDelegatePairMaker_1();
  public delegate System.IntPtr SwigDelegatePairMaker_2(int index);
  public delegate ushort SwigDelegatePairMaker_3();
  public delegate void SwigDelegatePairMaker_4();
  public delegate bool SwigDelegatePairMaker_5();
  public delegate int SwigDelegatePairMaker_6();
  public delegate int SwigDelegatePairMaker_7();

  private SwigDelegatePairMaker_0 swigDelegate0;
  private SwigDelegatePairMaker_1 swigDelegate1;
  private SwigDelegatePairMaker_2 swigDelegate2;
  private SwigDelegatePairMaker_3 swigDelegate3;
  private SwigDelegatePairMaker_4 swigDelegate4;
  private SwigDelegatePairMaker_5 swigDelegate5;
  private SwigDelegatePairMaker_6 swigDelegate6;
  private SwigDelegatePairMaker_7 swigDelegate7;

  private static System.Type[] swigMethodTypes0 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes1 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes2 = new System.Type[] { typeof(int) };
  private static System.Type[] swigMethodTypes3 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes4 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes5 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes6 = new System.Type[] {  };
  private static System.Type[] swigMethodTypes7 = new System.Type[] {  };
}

}
