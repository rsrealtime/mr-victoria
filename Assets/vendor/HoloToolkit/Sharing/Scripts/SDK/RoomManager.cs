//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HoloToolkit.Sharing {

public class RoomManager : System.IDisposable {
  private System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RoomManager(System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static System.Runtime.InteropServices.HandleRef getCPtr(RoomManager obj) {
    return (obj == null) ? new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RoomManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharingClientPINVOKE.delete_RoomManager(swigCPtr);
        }
        swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      System.GC.SuppressFinalize(this);
    }
  }

  public virtual void AddListener(RoomManagerListener newListener) {
    SharingClientPINVOKE.RoomManager_AddListener(swigCPtr, RoomManagerListener.getCPtr(newListener));
  }

  public virtual void RemoveListener(RoomManagerListener oldListener) {
    SharingClientPINVOKE.RoomManager_RemoveListener(swigCPtr, RoomManagerListener.getCPtr(oldListener));
  }

  public virtual int GetRoomCount() {
    int ret = SharingClientPINVOKE.RoomManager_GetRoomCount(swigCPtr);
    return ret;
  }

  public virtual Room GetRoom(int index) {
    System.IntPtr cPtr = SharingClientPINVOKE.RoomManager_GetRoom(swigCPtr, index);
    Room ret = (cPtr == System.IntPtr.Zero) ? null : new Room(cPtr, true);
    return ret; 
  }

  public virtual Room GetCurrentRoom() {
    System.IntPtr cPtr = SharingClientPINVOKE.RoomManager_GetCurrentRoom(swigCPtr);
    Room ret = (cPtr == System.IntPtr.Zero) ? null : new Room(cPtr, true);
    return ret; 
  }

  public virtual Room CreateRoom(XString roomName, long roomID, bool keepOpenWhenEmpty) {
    System.IntPtr cPtr = SharingClientPINVOKE.RoomManager_CreateRoom(swigCPtr, XString.getCPtr(roomName), roomID, keepOpenWhenEmpty);
    Room ret = (cPtr == System.IntPtr.Zero) ? null : new Room(cPtr, true);
    return ret; 
  }

  public virtual bool JoinRoom(Room room) {
    bool ret = SharingClientPINVOKE.RoomManager_JoinRoom(swigCPtr, Room.getCPtr(room));
    return ret;
  }

  public virtual bool LeaveRoom() {
    bool ret = SharingClientPINVOKE.RoomManager_LeaveRoom(swigCPtr);
    return ret;
  }

  public virtual bool DownloadAnchor(Room room, XString anchorName) {
    bool ret = SharingClientPINVOKE.RoomManager_DownloadAnchor(swigCPtr, Room.getCPtr(room), XString.getCPtr(anchorName));
    return ret;
  }

  public virtual bool UploadAnchor(Room room, XString anchorName, byte[] data, int dataSize) {
    System.Runtime.InteropServices.GCHandle pinHandle_data = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned); try {
    {
      bool ret = SharingClientPINVOKE.RoomManager_UploadAnchor(swigCPtr, Room.getCPtr(room), XString.getCPtr(anchorName), (System.IntPtr)pinHandle_data.AddrOfPinnedObject(), dataSize);
      return ret;
    }
    } finally { pinHandle_data.Free(); }
  }

}

}
