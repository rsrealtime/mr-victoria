//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HoloToolkit.Sharing {

public class VisualPairConnector : PairMaker {
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  internal VisualPairConnector(System.IntPtr cPtr, bool cMemoryOwn) : base(SharingClientPINVOKE.VisualPairConnector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static System.Runtime.InteropServices.HandleRef getCPtr(VisualPairConnector obj) {
    return (obj == null) ? new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VisualPairConnector() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharingClientPINVOKE.delete_VisualPairConnector(swigCPtr);
        }
        swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static VisualPairConnector Create() {
    System.IntPtr cPtr = SharingClientPINVOKE.VisualPairConnector_Create();
    VisualPairConnector ret = (cPtr == System.IntPtr.Zero) ? null : new VisualPairConnector(cPtr, true);
    return ret; 
  }

  public virtual bool ProcessImage(byte[] image, int width, int height, int bytesPerPixel) {
    System.Runtime.InteropServices.GCHandle pinHandle_image = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned); try {
    {
      bool ret = SharingClientPINVOKE.VisualPairConnector_ProcessImage(swigCPtr, (System.IntPtr)pinHandle_image.AddrOfPinnedObject(), width, height, bytesPerPixel);
      return ret;
    }
    } finally { pinHandle_image.Free(); }
  }

  public virtual bool IsProcessingImage() {
    bool ret = SharingClientPINVOKE.VisualPairConnector_IsProcessingImage(swigCPtr);
    return ret;
  }

}

}
